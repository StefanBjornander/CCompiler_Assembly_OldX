
// ==========================================================================
//  GPLEX error listing for lex source file <MainScanner.gplex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  STEFAN1968
//  DateTime: 2019-02-23 18:03:20
//  UserName: Stefan
// ==========================================================================


%namespace CCompiler

%{
  public MainParser.Lexer toLexer() {
    return (new MainScannerToLexer(this)); 
  }
%}

FLOATING_VALUE (\+|\-)?([0-9]+"."[0-9]*|"."[0-9]+)([eE][\+\-]?[0-9]+)?|[0-9]+[eE][\+\-]?[0-9]+)([fF]|[lL])?
// Error: Extra characters at end of regular expression
// ----------------------------------------------------



DECIMAL_VALUE ((\+|\-)?[0-9]+([uU]|[sSlL]|[uU][sSlL]|[sSlL][uU])?)|((\+|\-)?0[xX][0-9a-fA-F]+([uU]|[sSlL]|[uU][sSlL]|[sSlL][uU])?)

CHAR_VALUE \'[^\']+\'
STRING_VALUE \"[^\"]*\"

NAME [a-zA-Z_][a-zA-Z0-9_]*
PATH_LINE \$.*\$
WHITE_SPACE [ \t\r\n\f]

%%
"auto"            { return ((int) Tokens.AUTO);            }
"break"           { return ((int) Tokens.BREAK);           }
"case"            { return ((int) Tokens.CASE);            }
"char"            { return ((int) Tokens.CHAR);            }
"clear_registers" { return ((int) Tokens.CLEAR_REGISTERS); }
"const"           { return ((int) Tokens.CONSTANT);        }
"continue"        { return ((int) Tokens.CONTINUE);        }
"default"         { return ((int) Tokens.DEFAULT);         }
"do"              { return ((int) Tokens.DO);              }
"double"          { return ((int) Tokens.DOUBLE);          }
"else"            { return ((int) Tokens.ELSE);            }
"enum"            { return ((int) Tokens.ENUM);            }
"extern"          { return ((int) Tokens.EXTERN);          }
"float"           { return ((int) Tokens.FLOAT);           }
"for"             { return ((int) Tokens.FOR);             }
"goto"            { return ((int) Tokens.GOTO);            }
"int"             { return ((int) Tokens.INT);             }
"interrupt"       { return ((int) Tokens.INTERRUPT);       }
"if"              { return ((int) Tokens.IF);              }
"jump_register"   { return ((int) Tokens.JUMP_REGISTER);   }
"load_register"   { return ((int) Tokens.LOAD_REGISTER);   }
"long"            { return ((int) Tokens.LONG);            }
"register"        { return ((int) Tokens.REGISTER);        }
"return"          { return ((int) Tokens.RETURN);          }
"short"           { return ((int) Tokens.SHORT);           }
"signed"          { return ((int) Tokens.SIGNED);          }
"sizeof"          { return ((int) Tokens.SIZEOF);         }
"static"          { return ((int) Tokens.STATIC);          }
"store_register"  { return ((int) Tokens.STORE_REGISTER);  }
"store_flagbyte"  { return ((int) Tokens.STORE_FLAGBYTE);  }
"struct"          { return ((int) Tokens.STRUCT);          }
"switch"          { return ((int) Tokens.SWITCH);          }
"typedef"         { return ((int) Tokens.TYPEDEF);         }
"union"           { return ((int) Tokens.UNION);           }
"unsigned"        { return ((int) Tokens.UNSIGNED);        }
//"wchar_t"         { return ((int) Tokens.WCHAR_T);         }
"while"           { return ((int) Tokens.WHILE);           }
"void"            { return ((int) Tokens.VOID);            }
"volatile"        { return ((int) Tokens.VOLATILE);        }

";" { return ((int) Tokens.SEMICOLON); }
":" { return ((int) Tokens.COLON); }
"," { return ((int) Tokens.COMMA); }

"." { return ((int) Tokens.DOT); }
"->" { return ((int) Tokens.ARROW); }
"..." { return ((int) Tokens.ELLIPSE); }

"(" { return ((int) Tokens.LEFT_PAREN); }
")" { return ((int) Tokens.RIGHT_PAREN); }
"{" { return ((int) Tokens.LEFT_BLOCK); }
"}" { return ((int) Tokens.RIGHT_BLOCK); }
"[" { return ((int) Tokens.LEFT_SQUARE); }
"]" { return ((int) Tokens.RIGHT_SQUARE); }

"*" { return ((int) Tokens.ASTERRISK); }
"?" { return ((int) Tokens.QUESTION_MARK); }

"||" { return ((int) Tokens.LOGICAL_OR); }
"&&" { return ((int) Tokens.LOGICAL_AND); }
"!" { return ((int) Tokens.LOGICAL_NOT); }
"&" { return ((int) Tokens.AMPERSAND); }
"^" { return ((int) Tokens.BITWISE_XOR); }
"|" { return ((int) Tokens.BITWISE_IOR); }
"~" { return ((int) Tokens.BITWISE_NOT); }

"==" { return ((int) Tokens.EQUAL); }
"!=" { return ((int) Tokens.NOT_EQUAL); }

"<"  { return ((int) Tokens.LESS_THAN); }
"<=" { return ((int) Tokens.LESS_THAN_EQUAL); }
">"  { return ((int) Tokens.GREATER_THAN); }
">=" { return ((int) Tokens.GREATER_THAN_EQUAL); }

"<<" { return ((int) Tokens.LEFT_SHIFT); }
">>" { return ((int) Tokens.RIGHT_SHIFT); }

"+" { return ((int) Tokens.PLUS); }
"-" { return ((int) Tokens.MINUS); }

"/" { return ((int) Tokens.DIVIDE); }
"%" { return ((int) Tokens.MODULO); }

"++" { return ((int) Tokens.INCREMENT); }
"--" { return ((int) Tokens.DECREMENT); }

"="  { return ((int) Tokens.ASSIGN); }
"+="  { return ((int) Tokens.ADD_ASSIGN); }
"-="  { return ((int) Tokens.SUBTRACT_ASSIGN); }
"*="  { return ((int) Tokens.MULTIPLY_ASSIGN); }
"/="  { return ((int) Tokens.DIVIDE_ASSIGN); }
"%="  { return ((int) Tokens.MODULO_ASSIGN); }
"<<=" { return ((int) Tokens.LEFT_SHIFT_ASSIGN); }
">>=" { return ((int) Tokens.RIGHT_SHIFT_ASSIGN); }
"&="  { return ((int) Tokens.AND_ASSIGN); }
"^="  { return ((int) Tokens.XOR_ASSIGN); }
"|="  { return ((int) Tokens.IOR_ASSIGN); }

{NAME} {
  String name = yytext();
  name = name.equals("abs") ? "abs$" : name;
  Symbol symbol = Main.CurrentTable.lookupSymbol(name);

  if ((symbol != null) && symbol.isTypedef()) {
    yylval.type = symbol.type();
    return ((int) Tokens.TYPEDEF_NAME);
  }
  else {
    yylval.name = name;
    return ((int) Tokens.NAME);
  }
}

{DECIMAL_VALUE} {
  String text = yytext().toLowerCase();
  Sort sort = Sort.Signed_Int;
  int base = 10;

  if (text.contains("s")) {
    sort = Sort.Signed_Short_Int;
    text = text.replace("s", "");
  }
  else if (text.contains("l")) {
    sort = Sort.Signed_Long_Int;
    text = text.replace("l", "");
  }

  if (text.contains("u")) {
    sort = Sort.valueOf(sort.name().replace("Signed", "Unsigned"));
    text = text.replace("u", "");
  }

  if (text.startsWith("0x")) {
    base = 16;
    text = text.substring(2);
  }
  else if (text.startsWith("0")) {
    base = 8;
  }

  Type type = new Type(sort);
  BigInteger value = new BigInteger(text, base);
  yylval.symbol = new Symbol(type, value);
  return ((int) Tokens.VALUE);
}

{FLOATING_VALUE} {
  String text = yytext().toLowerCase();
  Sort sort = Sort.Double;

  if (text.contains("f")) {
    sort = Sort.Float;
    text = text.replace("f", "");
  }
  else if (text.contains("l")) {
    sort = Sort.Long_Double;
    text = text.replace("l", "");
  }

  Type type = new Type(sort);
  BigDecimal value = new BigDecimal(text);
  yylval.symbol = new Symbol(type, value);
  Main.CurrentTable.addSymbol(symbol);
  return ((int) Tokens.VALUE);
}

{CHAR_VALUE} {
  Type type = new Type(Sort.Signed_Char);
  String text = yytext().substring(1, yylength() - 1);
  int value = (int) Preprocessor.octalToChar(text).charAt(0);
  yylval.symbol = new Symbol(type, BigInteger.valueOf(value));
  return ((int) Tokens.VALUE);
}

{STRING_VALUE} {
  Type type = new Type(Sort.String);
  String text = yytext().substring(1, yylength() - 1);
  yylval.symbol = new Symbol(type, Preprocessor.octalToChar(text));
  Main.CurrentTable.addSymbol(symbol);
  return ((int) Tokens.VALUE);
}

{PATH_LINE} {
  String text = yytext().substring(1, yylength() - 1);
  int index = text.indexOf(',');
//  Main.Path = text.substring(0, index).replace("+", " ");
//  Main.Line = Integer.parseInt(text.substring(index + 1));
}

{WHITE_SPACE} {
  if (yytext().equals("\n")) {
    ++Main.Line;
  }
}

. { Assert.error(yytext(), "unknown character"); }// ==========================================================================

