// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  STEFAN1968
// DateTime: 2021-01-20 19:18:25
// UserName: Stefan
// Input file <MainParser.gppg - 2020-05-26 22:10:49>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Numerics;
using CCompiler;

namespace CCompiler_Main
{
public enum Tokens {error=2,EOF=3,AUTO=4,REGISTER=5,STATIC=6,
    EXTERN=7,TYPEDEF=8,CONSTANT=9,VOLATILE=10,SIGNED=11,UNSIGNED=12,
    CHAR=13,WCHAR_T=14,SHORT=15,INT=16,LONG=17,FLOAT=18,
    DOUBLE=19,VOID=20,ENUM=21,STRUCT=22,UNION=23,PLUS=24,
    MINUS=25,DIVIDE=26,BACKSLASH=27,MODULO=28,INCREMENT=29,DECREMENT=30,
    EQUAL=31,NOT_EQUAL=32,LESS_THAN=33,LESS_THAN_EQUAL=34,GREATER_THAN=35,GREATER_THAN_EQUAL=36,
    LEFT_SHIFT=37,RIGHT_SHIFT=38,ASSIGN=39,ADD_ASSIGN=40,SUBTRACT_ASSIGN=41,MULTIPLY_ASSIGN=42,
    DIVIDE_ASSIGN=43,MODULO_ASSIGN=44,LEFT_SHIFT_ASSIGN=45,RIGHT_SHIFT_ASSIGN=46,AND_ASSIGN=47,IOR_ASSIGN=48,
    XOR_ASSIGN=49,COLON=50,COMMA=51,SEMICOLON=52,ELLIPSE=53,DOT=54,
    ARROW=55,ASTERRISK=56,AMPERSAND=57,LEFT_PAREN=58,RIGHT_PAREN=59,LEFT_BLOCK=60,
    RIGHT_BLOCK=61,LEFT_SQUARE=62,RIGHT_SQUARE=63,SIZEOF=64,LOGICAL_OR=65,LOGICAL_AND=66,
    LOGICAL_NOT=67,BITWISE_XOR=68,BITWISE_IOR=69,BITWISE_NOT=70,QUESTION_MARK=71,IF=72,
    ELSE=73,SWITCH=74,CASE=75,DEFAULT=76,FOR=77,WHILE=78,
    DO=79,CONTINUE=80,BREAK=81,RETURN=82,GOTO=83,INTERRUPT=84,
    LOAD_REGISTER=85,STORE_REGISTER=86,CLEAR_REGISTERS=87,FLAGBYTE=88,JUMP_REGISTER=89,SYSTEM_CALL=90,
    CARRY_FLAG=91,NAME=92,REGISTER_NAME=93,TYPEDEF_NAME=94,VALUE=95};

public partial struct ValueType
#line 29 "MainParser.gppg"
       {
  public string name;
  public Register register;
  public CCompiler.Type type;
  public List<CCompiler.Type> type_list;
  public ISet<Pair<Symbol,bool>> symbol_bool_pair_set;
  public Pair<Symbol,bool> symbol_bool_pair;
  public Sort sort;
  public Symbol symbol;
  public List<Symbol> symbol_list;
  public List<string> string_list;
  public Declarator declarator;
  public List<Declarator> declarator_list;
  public MiddleOperator middleOperator;
  public Expression expression;
  public List<Expression> expression_list;
  public Statement statement;
  public Pair<List<Symbol>,Boolean> pair;
  public List<Pair<List<Symbol>,Boolean>> pair_list;
  public List<MiddleCode> middle_code_list;
  public object obj;
  public List<object> object_list;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MainParser.gppg - 2020-05-26 22:10:49
#line 8 "MainParser.gppg"
  public static Stack<BigInteger> EnumValueStack = new Stack<BigInteger>();
#line default
  // End verbatim content from MainParser.gppg - 2020-05-26 22:10:49

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[223];
  private static State[] states = new State[419];
  private static string[] nonTerms = new string[] {
      "declaration_specifier", "optional_identifier", "struct_or_union_specifier", 
      "struct_or_union", "enum_specifier", "enum_list", "enum", "declarator_list", 
      "init_bitfield_declarator", "declaration_specifier_list", "declaration", 
      "declarator", "direct_declarator", "optional_pointer_list", "pointer_list", 
      "pointer", "optional_parameter_ellipse_list", "parameter_ellipse_list", 
      "parameter_list", "parameter_declaration", "optional_identifier_list", 
      "identifier_list", "initializer_list", "initializer", "type_name", "abstract_declarator", 
      "direct_abstract_declarator", "equality_operator", "relation_operator", 
      "shift_operator", "binary_Add_operator", "assignment_operator", "multiply_operator", 
      "prefix_Add_operator", "increment_operator", "optional_constant_integral_expression", 
      "constant_integral_expression", "optional_expression", "expression", "assignment_expression", 
      "condition_expression", "logical_or_expression", "logical_and_expression", 
      "bitwise_ior_expression", "bitwise_xor_expression", "bitwise_and_expression", 
      "equality_expression", "relation_expression", "shift_expression", "add_expression", 
      "multiply_expression", "cast_expression", "prefix_expression", "postfix_expression", 
      "primary_expression", "optional_statement_list", "statement", "closed_statement", 
      "opened_statement", "optional_argument_expression_list", "argument_expression_list", 
      "optional_system_argument_expression_list", "system_argument_expression_list", 
      "translation_unit", "$accept", "external_declaration", "function_definition", 
      "Anon@1", "optional_declaration_list", "Anon@2", "Anon@3", "Anon@4", "Anon@5", 
      "declaration_list", "Anon@6", "Anon@7", "Anon@8", "optional_comma", "switch_header", 
      "loop_header", "Anon@9", "Anon@10", };

  static Parser() {
    states[0] = new State(new int[]{56,296,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,92,-65,58,-65},new int[]{-64,1,-66,418,-67,4,-12,5,-14,239,-15,308,-16,298,-10,409,-1,285,-3,207,-4,208,-5,259,-11,417});
    states[1] = new State(new int[]{3,2,56,296,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,92,-65,58,-65},new int[]{-66,3,-67,4,-12,5,-14,239,-15,308,-16,298,-10,409,-1,285,-3,207,-4,208,-5,259,-11,417});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-6,new int[]{-68,6});
    states[6] = new State(-12,new int[]{-69,7});
    states[7] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,60,-7},new int[]{-70,8,-11,408,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[8] = new State(new int[]{60,9});
    states[9] = new State(-101,new int[]{-56,10});
    states[10] = new State(new int[]{61,11,72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,12,-59,13,-58,349,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[11] = new State(-8);
    states[12] = new State(-102);
    states[13] = new State(-103);
    states[14] = new State(new int[]{58,15});
    states[15] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,16,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[16] = new State(new int[]{59,17,51,86});
    states[17] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,18,-58,19,-59,13,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[18] = new State(-107);
    states[19] = new State(new int[]{73,20,61,-104,72,-104,74,-104,75,-104,78,-104,77,-104,92,-104,79,-104,76,-104,80,-104,81,-104,60,-104,83,-104,82,-104,95,-104,90,-104,93,-104,91,-104,88,-104,58,-104,24,-104,25,-104,29,-104,30,-104,67,-104,70,-104,64,-104,57,-104,56,-104,9,-104,10,-104,4,-104,5,-104,6,-104,7,-104,8,-104,20,-104,13,-104,15,-104,16,-104,17,-104,18,-104,19,-104,11,-104,12,-104,22,-104,23,-104,21,-104,94,-104,89,-104,84,-104,52,-104});
    states[20] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-59,21,-58,22,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[21] = new State(-108);
    states[22] = new State(-114);
    states[23] = new State(-105,new int[]{-79,24});
    states[24] = new State(new int[]{58,25});
    states[25] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,26,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[26] = new State(new int[]{59,27,51,86});
    states[27] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-59,28,-58,29,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[28] = new State(-109);
    states[29] = new State(-115);
    states[30] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,31,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[31] = new State(new int[]{50,32});
    states[32] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-59,33,-58,34,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[33] = new State(-110);
    states[34] = new State(-119);
    states[35] = new State(-106,new int[]{-80,36});
    states[36] = new State(new int[]{58,37});
    states[37] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,38,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[38] = new State(new int[]{59,39,51,86});
    states[39] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-59,40,-58,41,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[40] = new State(-111);
    states[41] = new State(-116);
    states[42] = new State(-106,new int[]{-80,43});
    states[43] = new State(new int[]{58,44});
    states[44] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,45,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[45] = new State(new int[]{52,46});
    states[46] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,47,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[47] = new State(new int[]{52,48});
    states[48] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,59,-134},new int[]{-38,49,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[49] = new State(new int[]{59,50});
    states[50] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-59,51,-58,52,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[51] = new State(-112);
    states[52] = new State(-117);
    states[53] = new State(new int[]{50,54,54,-208,55,-208,62,-208,29,-208,30,-208,58,-208,39,-208,40,-208,41,-208,42,-208,43,-208,44,-208,47,-208,48,-208,49,-208,45,-208,46,-208,56,-208,26,-208,28,-208,24,-208,25,-208,37,-208,38,-208,33,-208,34,-208,35,-208,36,-208,31,-208,32,-208,57,-208,68,-208,69,-208,66,-208,65,-208,71,-208,51,-208,52,-208});
    states[54] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,55});
    states[55] = new State(-113);
    states[56] = new State(new int[]{58,57});
    states[57] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,58,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[58] = new State(new int[]{59,59,51,86});
    states[59] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,18,-58,60,-59,13,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[60] = new State(new int[]{73,61,61,-104,72,-104,74,-104,75,-104,78,-104,77,-104,92,-104,79,-104,76,-104,80,-104,81,-104,60,-104,83,-104,82,-104,95,-104,90,-104,93,-104,91,-104,88,-104,58,-104,24,-104,25,-104,29,-104,30,-104,67,-104,70,-104,64,-104,57,-104,56,-104,9,-104,10,-104,4,-104,5,-104,6,-104,7,-104,8,-104,20,-104,13,-104,15,-104,16,-104,17,-104,18,-104,19,-104,11,-104,12,-104,22,-104,23,-104,21,-104,94,-104,89,-104,84,-104,52,-104});
    states[61] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,21});
    states[62] = new State(-105,new int[]{-79,63});
    states[63] = new State(new int[]{58,64});
    states[64] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,65,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[65] = new State(new int[]{59,66,51,86});
    states[66] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,28});
    states[67] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,68,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[68] = new State(new int[]{50,69});
    states[69] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,33});
    states[70] = new State(-106,new int[]{-80,71});
    states[71] = new State(new int[]{58,72});
    states[72] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,73,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[73] = new State(new int[]{59,74,51,86});
    states[74] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,40});
    states[75] = new State(-106,new int[]{-80,76});
    states[76] = new State(new int[]{58,77});
    states[77] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,78,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[78] = new State(new int[]{52,79});
    states[79] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,80,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[80] = new State(new int[]{52,81});
    states[81] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,59,-134},new int[]{-38,82,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[82] = new State(new int[]{59,83});
    states[83] = new State(new int[]{72,56,74,62,75,67,78,70,77,75,92,84},new int[]{-59,51});
    states[84] = new State(new int[]{50,54});
    states[85] = new State(new int[]{51,86,52,-135,59,-135});
    states[86] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-40,87,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[87] = new State(-137);
    states[88] = new State(-138);
    states[89] = new State(new int[]{65,90,71,337,51,-151,52,-151,59,-151,50,-151,63,-151,61,-151});
    states[90] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-43,91,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[91] = new State(new int[]{66,92,65,-154,71,-154,51,-154,52,-154,59,-154,50,-154,63,-154,61,-154});
    states[92] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-44,93,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[93] = new State(new int[]{69,94,66,-156,65,-156,71,-156,51,-156,52,-156,59,-156,50,-156,63,-156,61,-156});
    states[94] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-45,95,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[95] = new State(new int[]{68,96,69,-158,66,-158,65,-158,71,-158,51,-158,52,-158,59,-158,50,-158,63,-158,61,-158});
    states[96] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-46,97,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[97] = new State(new int[]{57,98,68,-160,69,-160,66,-160,65,-160,71,-160,51,-160,52,-160,59,-160,50,-160,63,-160,61,-160});
    states[98] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-47,99,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[99] = new State(new int[]{31,126,32,127,57,-162,68,-162,69,-162,66,-162,65,-162,71,-162,51,-162,52,-162,59,-162,50,-162,63,-162,61,-162},new int[]{-28,100});
    states[100] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-48,101,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[101] = new State(new int[]{33,129,34,130,35,131,36,132,31,-164,32,-164,57,-164,68,-164,69,-164,66,-164,65,-164,71,-164,51,-164,52,-164,59,-164,50,-164,63,-164,61,-164},new int[]{-29,102});
    states[102] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-49,103,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[103] = new State(new int[]{37,134,38,135,33,-168,34,-168,35,-168,36,-168,31,-168,32,-168,57,-168,68,-168,69,-168,66,-168,65,-168,71,-168,51,-168,52,-168,59,-168,50,-168,63,-168,61,-168},new int[]{-30,104});
    states[104] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-50,105,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[105] = new State(new int[]{24,137,25,138,37,-174,38,-174,33,-174,34,-174,35,-174,36,-174,31,-174,32,-174,57,-174,68,-174,69,-174,66,-174,65,-174,71,-174,51,-174,52,-174,59,-174,50,-174,63,-174,61,-174},new int[]{-31,106});
    states[106] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-51,107,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[107] = new State(new int[]{56,140,26,141,28,142,24,-178,25,-178,37,-178,38,-178,33,-178,34,-178,35,-178,36,-178,31,-178,32,-178,57,-178,68,-178,69,-178,66,-178,65,-178,71,-178,51,-178,52,-178,59,-178,50,-178,63,-178,61,-178},new int[]{-33,108});
    states[108] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,109,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[109] = new State(-182);
    states[110] = new State(-186);
    states[111] = new State(new int[]{54,113,55,115,62,117,29,177,30,178,39,-192,40,-192,41,-192,42,-192,43,-192,44,-192,47,-192,48,-192,49,-192,45,-192,46,-192,56,-192,26,-192,28,-192,24,-192,25,-192,37,-192,38,-192,33,-192,34,-192,35,-192,36,-192,31,-192,32,-192,57,-192,68,-192,69,-192,66,-192,65,-192,71,-192,51,-192,52,-192,59,-192,50,-192,63,-192,61,-192,58,-206},new int[]{-35,112,-82,329});
    states[112] = new State(-202);
    states[113] = new State(new int[]{92,114});
    states[114] = new State(-203);
    states[115] = new State(new int[]{92,116});
    states[116] = new State(-204);
    states[117] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,118,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[118] = new State(new int[]{63,119,51,86});
    states[119] = new State(-205);
    states[120] = new State(-136);
    states[121] = new State(new int[]{66,92,65,-153,71,-153,51,-153,52,-153,59,-153,50,-153,63,-153,61,-153});
    states[122] = new State(new int[]{69,94,66,-155,65,-155,71,-155,51,-155,52,-155,59,-155,50,-155,63,-155,61,-155});
    states[123] = new State(new int[]{68,96,69,-157,66,-157,65,-157,71,-157,51,-157,52,-157,59,-157,50,-157,63,-157,61,-157});
    states[124] = new State(new int[]{57,98,68,-159,69,-159,66,-159,65,-159,71,-159,51,-159,52,-159,59,-159,50,-159,63,-159,61,-159});
    states[125] = new State(new int[]{31,126,32,127,57,-161,68,-161,69,-161,66,-161,65,-161,71,-161,51,-161,52,-161,59,-161,50,-161,63,-161,61,-161},new int[]{-28,100});
    states[126] = new State(-165);
    states[127] = new State(-166);
    states[128] = new State(new int[]{33,129,34,130,35,131,36,132,31,-163,32,-163,57,-163,68,-163,69,-163,66,-163,65,-163,71,-163,51,-163,52,-163,59,-163,50,-163,63,-163,61,-163},new int[]{-29,102});
    states[129] = new State(-169);
    states[130] = new State(-170);
    states[131] = new State(-171);
    states[132] = new State(-172);
    states[133] = new State(new int[]{37,134,38,135,33,-167,34,-167,35,-167,36,-167,31,-167,32,-167,57,-167,68,-167,69,-167,66,-167,65,-167,71,-167,51,-167,52,-167,59,-167,50,-167,63,-167,61,-167},new int[]{-30,104});
    states[134] = new State(-175);
    states[135] = new State(-176);
    states[136] = new State(new int[]{24,137,25,138,37,-173,38,-173,33,-173,34,-173,35,-173,36,-173,31,-173,32,-173,57,-173,68,-173,69,-173,66,-173,65,-173,71,-173,51,-173,52,-173,59,-173,50,-173,63,-173,61,-173},new int[]{-31,106});
    states[137] = new State(-179);
    states[138] = new State(-180);
    states[139] = new State(new int[]{56,140,26,141,28,142,24,-177,25,-177,37,-177,38,-177,33,-177,34,-177,35,-177,36,-177,31,-177,32,-177,57,-177,68,-177,69,-177,66,-177,65,-177,71,-177,51,-177,52,-177,59,-177,50,-177,63,-177,61,-177},new int[]{-33,108});
    states[140] = new State(-183);
    states[141] = new State(-184);
    states[142] = new State(-185);
    states[143] = new State(-181);
    states[144] = new State(new int[]{39,145,40,319,41,320,42,321,43,322,44,323,47,324,48,325,49,326,45,327,46,328,56,-186,26,-186,28,-186,24,-186,25,-186,37,-186,38,-186,33,-186,34,-186,35,-186,36,-186,31,-186,32,-186,57,-186,68,-186,69,-186,66,-186,65,-186,71,-186,51,-186,52,-186,59,-186,63,-186,50,-186,61,-186},new int[]{-32,317});
    states[145] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-40,146,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[146] = new State(-139);
    states[147] = new State(-201);
    states[148] = new State(-208);
    states[149] = new State(-209);
    states[150] = new State(new int[]{50,151});
    states[151] = new State(new int[]{92,152});
    states[152] = new State(new int[]{58,153});
    states[153] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,59,-215},new int[]{-62,154,-63,156,-40,316,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[154] = new State(new int[]{59,155});
    states[155] = new State(-210);
    states[156] = new State(new int[]{51,157,59,-216});
    states[157] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-40,158,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[158] = new State(-218);
    states[159] = new State(-211);
    states[160] = new State(-212);
    states[161] = new State(new int[]{58,162});
    states[162] = new State(new int[]{59,163});
    states[163] = new State(-213);
    states[164] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273},new int[]{-39,165,-25,167,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-10,188,-1,285,-3,207,-4,208,-5,259});
    states[165] = new State(new int[]{59,166,51,86});
    states[166] = new State(-214);
    states[167] = new State(new int[]{59,168});
    states[168] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,169,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[169] = new State(-187);
    states[170] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,171,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[171] = new State(-193);
    states[172] = new State(-188);
    states[173] = new State(-189);
    states[174] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,176,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-53,175,-54,111,-55,147,-34,170,-35,174});
    states[175] = new State(-194);
    states[176] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,165,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[177] = new State(-190);
    states[178] = new State(-191);
    states[179] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,180,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[180] = new State(-195);
    states[181] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,182,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[182] = new State(-196);
    states[183] = new State(new int[]{58,185,92,148,95,149,90,150,93,159,91,160,88,161,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-53,184,-54,111,-55,147,-34,170,-35,174});
    states[184] = new State(-197);
    states[185] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-25,186,-39,165,-10,188,-1,285,-3,207,-4,208,-5,259,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[186] = new State(new int[]{59,187});
    states[187] = new State(-198);
    states[188] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,56,296,59,-92,58,-65,62,-65},new int[]{-1,189,-26,190,-3,207,-4,208,-5,259,-15,294,-16,298,-14,314});
    states[189] = new State(-17);
    states[190] = new State(-93);
    states[191] = new State(-18);
    states[192] = new State(-19);
    states[193] = new State(-20);
    states[194] = new State(-21);
    states[195] = new State(-22);
    states[196] = new State(-23);
    states[197] = new State(-24);
    states[198] = new State(-25);
    states[199] = new State(-26);
    states[200] = new State(-27);
    states[201] = new State(-28);
    states[202] = new State(-29);
    states[203] = new State(-30);
    states[204] = new State(-31);
    states[205] = new State(-32);
    states[206] = new State(-33);
    states[207] = new State(-34);
    states[208] = new State(new int[]{92,313,60,-42},new int[]{-2,209});
    states[209] = new State(-37,new int[]{-73,210});
    states[210] = new State(new int[]{60,211});
    states[211] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273},new int[]{-74,212,-11,312,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[212] = new State(new int[]{61,213,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273},new int[]{-11,214,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[213] = new State(-38);
    states[214] = new State(-45);
    states[215] = new State(new int[]{52,216,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,56,296,50,309,92,-65,58,-65},new int[]{-1,189,-8,217,-3,207,-4,208,-5,259,-9,311,-12,221,-14,239,-15,308,-16,298});
    states[216] = new State(-14);
    states[217] = new State(new int[]{52,218,51,219});
    states[218] = new State(-15);
    states[219] = new State(new int[]{56,296,50,309,92,-65,58,-65},new int[]{-9,220,-12,221,-14,239,-15,308,-16,298});
    states[220] = new State(-54);
    states[221] = new State(new int[]{39,222,50,236,52,-55,51,-55});
    states[222] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,60,229},new int[]{-24,223,-40,224,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[223] = new State(-56);
    states[224] = new State(-86);
    states[225] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,226,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[226] = new State(-199);
    states[227] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-52,228,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[228] = new State(-200);
    states[229] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,60,229},new int[]{-23,230,-24,235,-40,224,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[230] = new State(new int[]{51,233,61,-88},new int[]{-78,231});
    states[231] = new State(new int[]{61,232});
    states[232] = new State(-87);
    states[233] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,60,229,61,-89},new int[]{-24,234,-40,224,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[234] = new State(-91);
    states[235] = new State(-90);
    states[236] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,237,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[237] = new State(-57);
    states[238] = new State(-133);
    states[239] = new State(new int[]{92,286,58,307},new int[]{-13,240});
    states[240] = new State(new int[]{62,241,58,245,9,-59,10,-59,4,-59,5,-59,6,-59,7,-59,8,-59,20,-59,13,-59,15,-59,16,-59,17,-59,18,-59,19,-59,11,-59,12,-59,22,-59,23,-59,21,-59,94,-59,60,-59,39,-59,50,-59,52,-59,51,-59,59,-59});
    states[241] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,63,-131},new int[]{-36,242,-37,244,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[242] = new State(new int[]{63,243});
    states[243] = new State(-62);
    states[244] = new State(-132);
    states[245] = new State(new int[]{92,306,9,-75,10,-75,4,-75,5,-75,6,-75,7,-75,8,-75,20,-75,13,-75,15,-75,16,-75,17,-75,18,-75,19,-75,11,-75,12,-75,22,-75,23,-75,21,-75,94,-75,59,-82},new int[]{-18,246,-21,248,-19,250,-76,283,-22,303});
    states[246] = new State(new int[]{59,247});
    states[247] = new State(-63);
    states[248] = new State(new int[]{59,249});
    states[249] = new State(-64);
    states[250] = new State(new int[]{51,251,59,-73});
    states[251] = new State(new int[]{53,302,9,-77,10,-77,4,-77,5,-77,6,-77,7,-77,8,-77,20,-77,13,-77,15,-77,16,-77,17,-77,18,-77,19,-77,11,-77,12,-77,22,-77,23,-77,21,-77,94,-77},new int[]{-77,252});
    states[252] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273},new int[]{-20,253,-10,254,-1,285,-3,207,-4,208,-5,259});
    states[253] = new State(-78);
    states[254] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,56,296,51,-79,59,-79,92,-65,58,-65,62,-65},new int[]{-1,189,-12,255,-26,256,-3,207,-4,208,-5,259,-14,274,-15,294,-16,298});
    states[255] = new State(-80);
    states[256] = new State(-81);
    states[257] = new State(-40);
    states[258] = new State(-41);
    states[259] = new State(-35);
    states[260] = new State(new int[]{92,272,60,-42},new int[]{-2,261});
    states[261] = new State(-46,new int[]{-75,262});
    states[262] = new State(new int[]{60,263});
    states[263] = new State(new int[]{92,268},new int[]{-6,264,-7,271});
    states[264] = new State(new int[]{61,265,51,266});
    states[265] = new State(-47);
    states[266] = new State(new int[]{92,268},new int[]{-7,267});
    states[267] = new State(-50);
    states[268] = new State(new int[]{39,269,61,-51,51,-51});
    states[269] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,270,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[270] = new State(-52);
    states[271] = new State(-49);
    states[272] = new State(new int[]{52,-48,56,-48,9,-48,10,-48,4,-48,5,-48,6,-48,7,-48,8,-48,20,-48,13,-48,15,-48,16,-48,17,-48,18,-48,19,-48,11,-48,12,-48,22,-48,23,-48,21,-48,94,-48,50,-48,92,-48,58,-48,62,-48,59,-48,51,-48,60,-43});
    states[273] = new State(-36);
    states[274] = new State(new int[]{92,286,58,287,62,299},new int[]{-13,240,-27,275});
    states[275] = new State(new int[]{62,276,58,279,59,-95,51,-95});
    states[276] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,63,-131},new int[]{-36,277,-37,244,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[277] = new State(new int[]{63,278});
    states[278] = new State(-98);
    states[279] = new State(new int[]{59,-71,9,-75,10,-75,4,-75,5,-75,6,-75,7,-75,8,-75,20,-75,13,-75,15,-75,16,-75,17,-75,18,-75,19,-75,11,-75,12,-75,22,-75,23,-75,21,-75,94,-75},new int[]{-17,280,-18,282,-19,250,-76,283});
    states[280] = new State(new int[]{59,281});
    states[281] = new State(-100);
    states[282] = new State(-72);
    states[283] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273},new int[]{-20,284,-10,254,-1,285,-3,207,-4,208,-5,259});
    states[284] = new State(-76);
    states[285] = new State(-16);
    states[286] = new State(-60);
    states[287] = new State(new int[]{56,296,92,-65,58,-65,62,-65,59,-71,9,-75,10,-75,4,-75,5,-75,6,-75,7,-75,8,-75,20,-75,13,-75,15,-75,16,-75,17,-75,18,-75,19,-75,11,-75,12,-75,22,-75,23,-75,21,-75,94,-75},new int[]{-12,288,-26,290,-17,292,-14,274,-15,294,-16,298,-18,282,-19,250,-76,283});
    states[288] = new State(new int[]{59,289});
    states[289] = new State(-61);
    states[290] = new State(new int[]{59,291});
    states[291] = new State(-96);
    states[292] = new State(new int[]{59,293});
    states[293] = new State(-99);
    states[294] = new State(new int[]{56,296,58,-66,62,-66,92,-66,59,-94,51,-94},new int[]{-16,295});
    states[295] = new State(-68);
    states[296] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,56,-69,92,-69,58,-69,59,-69,62,-69,51,-69},new int[]{-10,297,-1,285,-3,207,-4,208,-5,259});
    states[297] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,56,-70,92,-70,58,-70,59,-70,62,-70,51,-70},new int[]{-1,189,-3,207,-4,208,-5,259});
    states[298] = new State(-67);
    states[299] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,63,-131},new int[]{-36,300,-37,244,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[300] = new State(new int[]{63,301});
    states[301] = new State(-97);
    states[302] = new State(-74);
    states[303] = new State(new int[]{51,304,59,-83});
    states[304] = new State(new int[]{92,305});
    states[305] = new State(-85);
    states[306] = new State(-84);
    states[307] = new State(new int[]{56,296,92,-65,58,-65},new int[]{-12,288,-14,239,-15,308,-16,298});
    states[308] = new State(new int[]{56,296,92,-66,58,-66},new int[]{-16,295});
    states[309] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,310,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[310] = new State(-58);
    states[311] = new State(-53);
    states[312] = new State(-44);
    states[313] = new State(new int[]{52,-39,56,-39,9,-39,10,-39,4,-39,5,-39,6,-39,7,-39,8,-39,20,-39,13,-39,15,-39,16,-39,17,-39,18,-39,19,-39,11,-39,12,-39,22,-39,23,-39,21,-39,94,-39,50,-39,92,-39,58,-39,62,-39,59,-39,51,-39,60,-43});
    states[314] = new State(new int[]{58,315,62,299},new int[]{-27,275});
    states[315] = new State(new int[]{56,296,58,-65,62,-65,59,-71,9,-75,10,-75,4,-75,5,-75,6,-75,7,-75,8,-75,20,-75,13,-75,15,-75,16,-75,17,-75,18,-75,19,-75,11,-75,12,-75,22,-75,23,-75,21,-75,94,-75},new int[]{-26,290,-17,292,-15,294,-16,298,-14,314,-18,282,-19,250,-76,283});
    states[316] = new State(-217);
    states[317] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-40,318,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[318] = new State(-140);
    states[319] = new State(-141);
    states[320] = new State(-142);
    states[321] = new State(-143);
    states[322] = new State(-144);
    states[323] = new State(-145);
    states[324] = new State(-146);
    states[325] = new State(-147);
    states[326] = new State(-148);
    states[327] = new State(-149);
    states[328] = new State(-150);
    states[329] = new State(new int[]{58,330});
    states[330] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,59,-219},new int[]{-60,331,-61,333,-40,336,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[331] = new State(new int[]{59,332});
    states[332] = new State(-207);
    states[333] = new State(new int[]{51,334,59,-220});
    states[334] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-40,335,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[335] = new State(-222);
    states[336] = new State(-221);
    states[337] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,338,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[338] = new State(new int[]{50,339,51,86});
    states[339] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-41,340,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[340] = new State(-152);
    states[341] = new State(-106,new int[]{-80,342});
    states[342] = new State(new int[]{72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,343,-59,13,-58,349,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[343] = new State(new int[]{78,344});
    states[344] = new State(new int[]{58,345});
    states[345] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,346,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[346] = new State(new int[]{59,347,51,86});
    states[347] = new State(new int[]{52,348});
    states[348] = new State(-118);
    states[349] = new State(-104);
    states[350] = new State(new int[]{50,351});
    states[351] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,352,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[352] = new State(-120);
    states[353] = new State(new int[]{58,354});
    states[354] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,355,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[355] = new State(new int[]{59,356,51,86});
    states[356] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,357,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[357] = new State(new int[]{73,358});
    states[358] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,22,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[359] = new State(-105,new int[]{-79,360});
    states[360] = new State(new int[]{58,361});
    states[361] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,362,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[362] = new State(new int[]{59,363,51,86});
    states[363] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,29,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[364] = new State(-106,new int[]{-80,365});
    states[365] = new State(new int[]{58,366});
    states[366] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-39,367,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[367] = new State(new int[]{59,368,51,86});
    states[368] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,41,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[369] = new State(-106,new int[]{-80,370});
    states[370] = new State(new int[]{58,371});
    states[371] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,372,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[372] = new State(new int[]{52,373});
    states[373] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,374,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[374] = new State(new int[]{52,375});
    states[375] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,59,-134},new int[]{-38,376,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[376] = new State(new int[]{59,377});
    states[377] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,52,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[378] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,379,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[379] = new State(new int[]{50,380});
    states[380] = new State(new int[]{72,353,74,359,78,364,77,369,79,341,75,378,76,350,80,381,81,383,60,385,83,389,82,392,92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-58,34,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[381] = new State(new int[]{52,382});
    states[382] = new State(-121);
    states[383] = new State(new int[]{52,384});
    states[384] = new State(-122);
    states[385] = new State(-123,new int[]{-81,386});
    states[386] = new State(-101,new int[]{-56,387});
    states[387] = new State(new int[]{61,388,72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,12,-59,13,-58,349,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[388] = new State(-124);
    states[389] = new State(new int[]{92,390});
    states[390] = new State(new int[]{52,391});
    states[391] = new State(-125);
    states[392] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,52,-134},new int[]{-38,393,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174});
    states[393] = new State(new int[]{52,394});
    states[394] = new State(-126);
    states[395] = new State(new int[]{52,396});
    states[396] = new State(-127);
    states[397] = new State(-128);
    states[398] = new State(new int[]{58,399});
    states[399] = new State(new int[]{93,400});
    states[400] = new State(new int[]{59,401});
    states[401] = new State(new int[]{52,402});
    states[402] = new State(-129);
    states[403] = new State(new int[]{58,404});
    states[404] = new State(new int[]{92,148,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227},new int[]{-37,405,-41,238,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,110,-54,111,-55,147,-34,170,-35,174});
    states[405] = new State(new int[]{59,406});
    states[406] = new State(new int[]{52,407});
    states[407] = new State(-130);
    states[408] = new State(-13);
    states[409] = new State(new int[]{52,216,56,296,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,50,309,92,-65,58,-65},new int[]{-12,410,-1,189,-8,217,-14,239,-15,308,-16,298,-3,207,-4,208,-5,259,-9,311});
    states[410] = new State(new int[]{39,222,50,236,52,-55,51,-55,9,-9,10,-9,4,-9,5,-9,6,-9,7,-9,8,-9,20,-9,13,-9,15,-9,16,-9,17,-9,18,-9,19,-9,11,-9,12,-9,22,-9,23,-9,21,-9,94,-9,60,-9},new int[]{-71,411});
    states[411] = new State(-12,new int[]{-69,412});
    states[412] = new State(new int[]{9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,60,-10},new int[]{-72,413,-11,408,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[413] = new State(new int[]{60,414});
    states[414] = new State(-101,new int[]{-56,415});
    states[415] = new State(new int[]{61,416,72,14,74,23,75,30,78,35,77,42,92,53,79,341,76,350,80,381,81,383,60,385,83,389,82,392,95,149,90,150,93,159,91,160,88,161,58,164,24,172,25,173,29,177,30,178,67,179,70,181,64,183,57,225,56,227,9,191,10,192,4,193,5,194,6,195,7,196,8,197,20,198,13,199,15,200,16,201,17,202,18,203,19,204,11,205,12,206,22,257,23,258,21,260,94,273,89,398,84,403,52,-134},new int[]{-57,12,-59,13,-58,349,-38,395,-39,85,-40,120,-41,88,-42,89,-43,121,-44,122,-45,123,-46,124,-47,125,-48,128,-49,133,-50,136,-51,139,-52,143,-53,144,-54,111,-55,147,-34,170,-35,174,-11,397,-10,215,-1,285,-3,207,-4,208,-5,259});
    states[416] = new State(-11);
    states[417] = new State(-5);
    states[418] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-65, new int[]{-64,3});
    rules[2] = new Rule(-64, new int[]{-66});
    rules[3] = new Rule(-64, new int[]{-64,-66});
    rules[4] = new Rule(-66, new int[]{-67});
    rules[5] = new Rule(-66, new int[]{-11});
    rules[6] = new Rule(-68, new int[]{});
    rules[7] = new Rule(-70, new int[]{});
    rules[8] = new Rule(-67, new int[]{-12,-68,-69,-70,60,-56,61});
    rules[9] = new Rule(-71, new int[]{});
    rules[10] = new Rule(-72, new int[]{});
    rules[11] = new Rule(-67, new int[]{-10,-12,-71,-69,-72,60,-56,61});
    rules[12] = new Rule(-69, new int[]{});
    rules[13] = new Rule(-69, new int[]{-69,-11});
    rules[14] = new Rule(-11, new int[]{-10,52});
    rules[15] = new Rule(-11, new int[]{-10,-8,52});
    rules[16] = new Rule(-10, new int[]{-1});
    rules[17] = new Rule(-10, new int[]{-10,-1});
    rules[18] = new Rule(-1, new int[]{9});
    rules[19] = new Rule(-1, new int[]{10});
    rules[20] = new Rule(-1, new int[]{4});
    rules[21] = new Rule(-1, new int[]{5});
    rules[22] = new Rule(-1, new int[]{6});
    rules[23] = new Rule(-1, new int[]{7});
    rules[24] = new Rule(-1, new int[]{8});
    rules[25] = new Rule(-1, new int[]{20});
    rules[26] = new Rule(-1, new int[]{13});
    rules[27] = new Rule(-1, new int[]{15});
    rules[28] = new Rule(-1, new int[]{16});
    rules[29] = new Rule(-1, new int[]{17});
    rules[30] = new Rule(-1, new int[]{18});
    rules[31] = new Rule(-1, new int[]{19});
    rules[32] = new Rule(-1, new int[]{11});
    rules[33] = new Rule(-1, new int[]{12});
    rules[34] = new Rule(-1, new int[]{-3});
    rules[35] = new Rule(-1, new int[]{-5});
    rules[36] = new Rule(-1, new int[]{94});
    rules[37] = new Rule(-73, new int[]{});
    rules[38] = new Rule(-3, new int[]{-4,-2,-73,60,-74,61});
    rules[39] = new Rule(-3, new int[]{-4,92});
    rules[40] = new Rule(-4, new int[]{22});
    rules[41] = new Rule(-4, new int[]{23});
    rules[42] = new Rule(-2, new int[]{});
    rules[43] = new Rule(-2, new int[]{92});
    rules[44] = new Rule(-74, new int[]{-11});
    rules[45] = new Rule(-74, new int[]{-74,-11});
    rules[46] = new Rule(-75, new int[]{});
    rules[47] = new Rule(-5, new int[]{21,-2,-75,60,-6,61});
    rules[48] = new Rule(-5, new int[]{21,92});
    rules[49] = new Rule(-6, new int[]{-7});
    rules[50] = new Rule(-6, new int[]{-6,51,-7});
    rules[51] = new Rule(-7, new int[]{92});
    rules[52] = new Rule(-7, new int[]{92,39,-37});
    rules[53] = new Rule(-8, new int[]{-9});
    rules[54] = new Rule(-8, new int[]{-8,51,-9});
    rules[55] = new Rule(-9, new int[]{-12});
    rules[56] = new Rule(-9, new int[]{-12,39,-24});
    rules[57] = new Rule(-9, new int[]{-12,50,-37});
    rules[58] = new Rule(-9, new int[]{50,-37});
    rules[59] = new Rule(-12, new int[]{-14,-13});
    rules[60] = new Rule(-13, new int[]{92});
    rules[61] = new Rule(-13, new int[]{58,-12,59});
    rules[62] = new Rule(-13, new int[]{-13,62,-36,63});
    rules[63] = new Rule(-13, new int[]{-13,58,-18,59});
    rules[64] = new Rule(-13, new int[]{-13,58,-21,59});
    rules[65] = new Rule(-14, new int[]{});
    rules[66] = new Rule(-14, new int[]{-15});
    rules[67] = new Rule(-15, new int[]{-16});
    rules[68] = new Rule(-15, new int[]{-15,-16});
    rules[69] = new Rule(-16, new int[]{56});
    rules[70] = new Rule(-16, new int[]{56,-10});
    rules[71] = new Rule(-17, new int[]{});
    rules[72] = new Rule(-17, new int[]{-18});
    rules[73] = new Rule(-18, new int[]{-19});
    rules[74] = new Rule(-18, new int[]{-19,51,53});
    rules[75] = new Rule(-76, new int[]{});
    rules[76] = new Rule(-19, new int[]{-76,-20});
    rules[77] = new Rule(-77, new int[]{});
    rules[78] = new Rule(-19, new int[]{-19,51,-77,-20});
    rules[79] = new Rule(-20, new int[]{-10});
    rules[80] = new Rule(-20, new int[]{-10,-12});
    rules[81] = new Rule(-20, new int[]{-10,-26});
    rules[82] = new Rule(-21, new int[]{});
    rules[83] = new Rule(-21, new int[]{-22});
    rules[84] = new Rule(-22, new int[]{92});
    rules[85] = new Rule(-22, new int[]{-22,51,92});
    rules[86] = new Rule(-24, new int[]{-40});
    rules[87] = new Rule(-24, new int[]{60,-23,-78,61});
    rules[88] = new Rule(-78, new int[]{});
    rules[89] = new Rule(-78, new int[]{51});
    rules[90] = new Rule(-23, new int[]{-24});
    rules[91] = new Rule(-23, new int[]{-23,51,-24});
    rules[92] = new Rule(-25, new int[]{-10});
    rules[93] = new Rule(-25, new int[]{-10,-26});
    rules[94] = new Rule(-26, new int[]{-15});
    rules[95] = new Rule(-26, new int[]{-14,-27});
    rules[96] = new Rule(-27, new int[]{58,-26,59});
    rules[97] = new Rule(-27, new int[]{62,-36,63});
    rules[98] = new Rule(-27, new int[]{-27,62,-36,63});
    rules[99] = new Rule(-27, new int[]{58,-17,59});
    rules[100] = new Rule(-27, new int[]{-27,58,-17,59});
    rules[101] = new Rule(-56, new int[]{});
    rules[102] = new Rule(-56, new int[]{-56,-57});
    rules[103] = new Rule(-57, new int[]{-59});
    rules[104] = new Rule(-57, new int[]{-58});
    rules[105] = new Rule(-79, new int[]{});
    rules[106] = new Rule(-80, new int[]{});
    rules[107] = new Rule(-59, new int[]{72,58,-39,59,-57});
    rules[108] = new Rule(-59, new int[]{72,58,-39,59,-58,73,-59});
    rules[109] = new Rule(-59, new int[]{74,-79,58,-39,59,-59});
    rules[110] = new Rule(-59, new int[]{75,-37,50,-59});
    rules[111] = new Rule(-59, new int[]{78,-80,58,-39,59,-59});
    rules[112] = new Rule(-59, new int[]{77,-80,58,-38,52,-38,52,-38,59,-59});
    rules[113] = new Rule(-59, new int[]{92,50,-59});
    rules[114] = new Rule(-58, new int[]{72,58,-39,59,-58,73,-58});
    rules[115] = new Rule(-58, new int[]{74,-79,58,-39,59,-58});
    rules[116] = new Rule(-58, new int[]{78,-80,58,-39,59,-58});
    rules[117] = new Rule(-58, new int[]{77,-80,58,-38,52,-38,52,-38,59,-58});
    rules[118] = new Rule(-58, new int[]{79,-80,-57,78,58,-39,59,52});
    rules[119] = new Rule(-58, new int[]{75,-37,50,-58});
    rules[120] = new Rule(-58, new int[]{76,50,-58});
    rules[121] = new Rule(-58, new int[]{80,52});
    rules[122] = new Rule(-58, new int[]{81,52});
    rules[123] = new Rule(-81, new int[]{});
    rules[124] = new Rule(-58, new int[]{60,-81,-56,61});
    rules[125] = new Rule(-58, new int[]{83,92,52});
    rules[126] = new Rule(-58, new int[]{82,-38,52});
    rules[127] = new Rule(-58, new int[]{-38,52});
    rules[128] = new Rule(-58, new int[]{-11});
    rules[129] = new Rule(-58, new int[]{89,58,93,59,52});
    rules[130] = new Rule(-58, new int[]{84,58,-37,59,52});
    rules[131] = new Rule(-36, new int[]{});
    rules[132] = new Rule(-36, new int[]{-37});
    rules[133] = new Rule(-37, new int[]{-41});
    rules[134] = new Rule(-38, new int[]{});
    rules[135] = new Rule(-38, new int[]{-39});
    rules[136] = new Rule(-39, new int[]{-40});
    rules[137] = new Rule(-39, new int[]{-39,51,-40});
    rules[138] = new Rule(-40, new int[]{-41});
    rules[139] = new Rule(-40, new int[]{-53,39,-40});
    rules[140] = new Rule(-40, new int[]{-53,-32,-40});
    rules[141] = new Rule(-32, new int[]{40});
    rules[142] = new Rule(-32, new int[]{41});
    rules[143] = new Rule(-32, new int[]{42});
    rules[144] = new Rule(-32, new int[]{43});
    rules[145] = new Rule(-32, new int[]{44});
    rules[146] = new Rule(-32, new int[]{47});
    rules[147] = new Rule(-32, new int[]{48});
    rules[148] = new Rule(-32, new int[]{49});
    rules[149] = new Rule(-32, new int[]{45});
    rules[150] = new Rule(-32, new int[]{46});
    rules[151] = new Rule(-41, new int[]{-42});
    rules[152] = new Rule(-41, new int[]{-42,71,-39,50,-41});
    rules[153] = new Rule(-42, new int[]{-43});
    rules[154] = new Rule(-42, new int[]{-42,65,-43});
    rules[155] = new Rule(-43, new int[]{-44});
    rules[156] = new Rule(-43, new int[]{-43,66,-44});
    rules[157] = new Rule(-44, new int[]{-45});
    rules[158] = new Rule(-44, new int[]{-44,69,-45});
    rules[159] = new Rule(-45, new int[]{-46});
    rules[160] = new Rule(-45, new int[]{-45,68,-46});
    rules[161] = new Rule(-46, new int[]{-47});
    rules[162] = new Rule(-46, new int[]{-46,57,-47});
    rules[163] = new Rule(-47, new int[]{-48});
    rules[164] = new Rule(-47, new int[]{-47,-28,-48});
    rules[165] = new Rule(-28, new int[]{31});
    rules[166] = new Rule(-28, new int[]{32});
    rules[167] = new Rule(-48, new int[]{-49});
    rules[168] = new Rule(-48, new int[]{-48,-29,-49});
    rules[169] = new Rule(-29, new int[]{33});
    rules[170] = new Rule(-29, new int[]{34});
    rules[171] = new Rule(-29, new int[]{35});
    rules[172] = new Rule(-29, new int[]{36});
    rules[173] = new Rule(-49, new int[]{-50});
    rules[174] = new Rule(-49, new int[]{-49,-30,-50});
    rules[175] = new Rule(-30, new int[]{37});
    rules[176] = new Rule(-30, new int[]{38});
    rules[177] = new Rule(-50, new int[]{-51});
    rules[178] = new Rule(-50, new int[]{-50,-31,-51});
    rules[179] = new Rule(-31, new int[]{24});
    rules[180] = new Rule(-31, new int[]{25});
    rules[181] = new Rule(-51, new int[]{-52});
    rules[182] = new Rule(-51, new int[]{-51,-33,-52});
    rules[183] = new Rule(-33, new int[]{56});
    rules[184] = new Rule(-33, new int[]{26});
    rules[185] = new Rule(-33, new int[]{28});
    rules[186] = new Rule(-52, new int[]{-53});
    rules[187] = new Rule(-52, new int[]{58,-25,59,-52});
    rules[188] = new Rule(-34, new int[]{24});
    rules[189] = new Rule(-34, new int[]{25});
    rules[190] = new Rule(-35, new int[]{29});
    rules[191] = new Rule(-35, new int[]{30});
    rules[192] = new Rule(-53, new int[]{-54});
    rules[193] = new Rule(-53, new int[]{-34,-52});
    rules[194] = new Rule(-53, new int[]{-35,-53});
    rules[195] = new Rule(-53, new int[]{67,-52});
    rules[196] = new Rule(-53, new int[]{70,-52});
    rules[197] = new Rule(-53, new int[]{64,-53});
    rules[198] = new Rule(-53, new int[]{64,58,-25,59});
    rules[199] = new Rule(-53, new int[]{57,-52});
    rules[200] = new Rule(-53, new int[]{56,-52});
    rules[201] = new Rule(-54, new int[]{-55});
    rules[202] = new Rule(-54, new int[]{-54,-35});
    rules[203] = new Rule(-54, new int[]{-54,54,92});
    rules[204] = new Rule(-54, new int[]{-54,55,92});
    rules[205] = new Rule(-54, new int[]{-54,62,-39,63});
    rules[206] = new Rule(-82, new int[]{});
    rules[207] = new Rule(-54, new int[]{-54,-82,58,-60,59});
    rules[208] = new Rule(-55, new int[]{92});
    rules[209] = new Rule(-55, new int[]{95});
    rules[210] = new Rule(-55, new int[]{90,50,92,58,-62,59});
    rules[211] = new Rule(-55, new int[]{93});
    rules[212] = new Rule(-55, new int[]{91});
    rules[213] = new Rule(-55, new int[]{88,58,59});
    rules[214] = new Rule(-55, new int[]{58,-39,59});
    rules[215] = new Rule(-62, new int[]{});
    rules[216] = new Rule(-62, new int[]{-63});
    rules[217] = new Rule(-63, new int[]{-40});
    rules[218] = new Rule(-63, new int[]{-63,51,-40});
    rules[219] = new Rule(-60, new int[]{});
    rules[220] = new Rule(-60, new int[]{-61});
    rules[221] = new Rule(-61, new int[]{-40});
    rules[222] = new Rule(-61, new int[]{-61,51,-40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 6: // Anon@1 -> /* empty */
#line 121 "MainParser.gppg"
               {
      GenerateDeclaration.GenerateFunctionHeader(null, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 7: // Anon@2 -> /* empty */
#line 124 "MainParser.gppg"
                              {
      GenerateDeclaration.CheckFunctionDefinition();
    }
#line default
        break;
      case 8: // function_definition -> declarator, Anon@1, optional_declaration_list, Anon@2, 
              //                        LEFT_BLOCK, optional_statement_list, RIGHT_BLOCK
#line 127 "MainParser.gppg"
                                                   {
      GenerateDeclaration.CheckGotoSet();
      GenerateDeclaration.GenerateFunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 9: // Anon@3 -> /* empty */
#line 131 "MainParser.gppg"
                                          {
      GenerateDeclaration.GenerateFunctionHeader(Start.SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 10: // Anon@4 -> /* empty */
#line 134 "MainParser.gppg"
                              {
      GenerateDeclaration.CheckFunctionDefinition();
    }
#line default
        break;
      case 11: // function_definition -> declaration_specifier_list, declarator, Anon@3, 
               //                        optional_declaration_list, Anon@4, LEFT_BLOCK, 
               //                        optional_statement_list, RIGHT_BLOCK
#line 137 "MainParser.gppg"
                                                   {
      GenerateDeclaration.CheckGotoSet();
      GenerateDeclaration.GenerateFunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 14: // declaration -> declaration_specifier_list, SEMICOLON
#line 149 "MainParser.gppg"
                                         {
      Start.SpecifierStack.Pop().Generate();
      CurrentSemanticValue.middle_code_list = new MyList<MiddleCode>();
    }
#line default
        break;
      case 15: // declaration -> declaration_specifier_list, declarator_list, SEMICOLON
#line 153 "MainParser.gppg"
                                                         {
      Start.SpecifierStack.Pop();
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-2].middle_code_list;
    }
#line default
        break;
      case 16: // declaration_specifier_list -> declaration_specifier
#line 159 "MainParser.gppg"
                          {
      Specifier specifier = new Specifier();
      specifier.Add(ValueStack[ValueStack.Depth-1].obj);
      Start.SpecifierStack.Push(specifier);
    }
#line default
        break;
      case 17: // declaration_specifier_list -> declaration_specifier_list, declaration_specifier
#line 164 "MainParser.gppg"
                                                     {
      Specifier specifier = Start.SpecifierStack.Peek();
      specifier.Add(ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 18: // declaration_specifier -> CONSTANT
#line 170 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Constant; }
#line default
        break;
      case 19: // declaration_specifier -> VOLATILE
#line 171 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Volatile; }
#line default
        break;
      case 20: // declaration_specifier -> AUTO
#line 172 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Auto;     }
#line default
        break;
      case 21: // declaration_specifier -> REGISTER
#line 173 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Register; }
#line default
        break;
      case 22: // declaration_specifier -> STATIC
#line 174 "MainParser.gppg"
             { 
      if (Start.CurrentTable.Scope == Scope.Global) {
        CurrentSemanticValue.obj = Mask.Private;
      }
      else {
        CurrentSemanticValue.obj = Mask.Static;
      }
    }
#line default
        break;
      case 23: // declaration_specifier -> EXTERN
#line 182 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Extern;   }
#line default
        break;
      case 24: // declaration_specifier -> TYPEDEF
#line 183 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Typedef;  }
#line default
        break;
      case 25: // declaration_specifier -> VOID
#line 184 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Void;     }
#line default
        break;
      case 26: // declaration_specifier -> CHAR
#line 185 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Char;     }
#line default
        break;
      case 27: // declaration_specifier -> SHORT
#line 187 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Short;    }
#line default
        break;
      case 28: // declaration_specifier -> INT
#line 188 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Int;      }
#line default
        break;
      case 29: // declaration_specifier -> LONG
#line 189 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Long;     }
#line default
        break;
      case 30: // declaration_specifier -> FLOAT
#line 190 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Float;    }
#line default
        break;
      case 31: // declaration_specifier -> DOUBLE
#line 191 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Double;   }
#line default
        break;
      case 32: // declaration_specifier -> SIGNED
#line 192 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Signed;   }
#line default
        break;
      case 33: // declaration_specifier -> UNSIGNED
#line 193 "MainParser.gppg"
             { CurrentSemanticValue.obj = Mask.Unsigned; }
#line default
        break;
      case 34: // declaration_specifier -> struct_or_union_specifier
#line 194 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 35: // declaration_specifier -> enum_specifier
#line 195 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 36: // declaration_specifier -> TYPEDEF_NAME
#line 196 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 37: // Anon@5 -> /* empty */
#line 201 "MainParser.gppg"
                                        {
      GenerateDeclaration.GenerateStructUnionHeader(ValueStack[ValueStack.Depth-1].name, ValueStack[ValueStack.Depth-2].sort);
      Scope scope = (ValueStack[ValueStack.Depth-2].sort == Sort.Struct) ? Scope.Struct : Scope.Union;
      Start.CurrentTable = new SymbolTable(Start.CurrentTable, scope);
    }
#line default
        break;
      case 38: // struct_or_union_specifier -> struct_or_union, optional_identifier, Anon@5, 
               //                              LEFT_BLOCK, declaration_list, RIGHT_BLOCK
#line 206 "MainParser.gppg"
                                            {
      CurrentSemanticValue.type = GenerateDeclaration.GenerateStructUnionSpecifier(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-6].sort);
      Start.CurrentTable = Start.CurrentTable.ParentTable;
    }
#line default
        break;
      case 39: // struct_or_union_specifier -> struct_or_union, NAME
#line 210 "MainParser.gppg"
                         {
      CurrentSemanticValue.type = GenerateDeclaration.LookupStructUnionSpecifier(ValueStack[ValueStack.Depth-1].name, ValueStack[ValueStack.Depth-2].sort);
    }
#line default
        break;
      case 40: // struct_or_union -> STRUCT
#line 215 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Struct; }
#line default
        break;
      case 41: // struct_or_union -> UNION
#line 216 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Union;  }
#line default
        break;
      case 42: // optional_identifier -> /* empty */
#line 219 "MainParser.gppg"
                { CurrentSemanticValue.name = null; }
#line default
        break;
      case 43: // optional_identifier -> NAME
#line 220 "MainParser.gppg"
                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name;   }
#line default
        break;
      case 46: // Anon@6 -> /* empty */
#line 229 "MainParser.gppg"
                             {
      Start.EnumValueStack.Push(BigInteger.Zero);
    }
#line default
        break;
      case 47: // enum_specifier -> ENUM, optional_identifier, Anon@6, LEFT_BLOCK, enum_list, 
               //                   RIGHT_BLOCK
#line 232 "MainParser.gppg"
                                     {
      CurrentSemanticValue.type = GenerateDeclaration.GenerateEnumSpecifier(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-2].symbol_bool_pair_set);
      Start.EnumValueStack.Pop();
    }
#line default
        break;
      case 48: // enum_specifier -> ENUM, NAME
#line 236 "MainParser.gppg"
              {
      CurrentSemanticValue.type = GenerateDeclaration.LookupEnum(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 49: // enum_list -> enum
#line 241 "MainParser.gppg"
         {
      ISet<Pair<Symbol,bool>> memberSet = new HashSet<Pair<Symbol,bool>>();
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol_bool_pair);
      CurrentSemanticValue.symbol_bool_pair_set = memberSet;
    }
#line default
        break;
      case 50: // enum_list -> enum_list, COMMA, enum
#line 246 "MainParser.gppg"
                         {
      ISet<Pair<Symbol,bool>> memberSet = ValueStack[ValueStack.Depth-3].symbol_bool_pair_set;
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol_bool_pair);
      CurrentSemanticValue.symbol_bool_pair_set = memberSet;
    }
#line default
        break;
      case 51: // enum -> NAME
#line 253 "MainParser.gppg"
         {
      Symbol symbol = GenerateDeclaration.GenerateEnumItem(ValueStack[ValueStack.Depth-1].name, null);
      CurrentSemanticValue.symbol_bool_pair = new Pair<Symbol,bool>(symbol, false);
    }
#line default
        break;
      case 52: // enum -> NAME, ASSIGN, constant_integral_expression
#line 257 "MainParser.gppg"
                                             {
      Symbol symbol = GenerateDeclaration.GenerateEnumItem(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].expression.Symbol());
      CurrentSemanticValue.symbol_bool_pair = new Pair<Symbol,bool>(symbol, true);
    }
#line default
        break;
      case 53: // declarator_list -> init_bitfield_declarator
#line 265 "MainParser.gppg"
                             {
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-1].middle_code_list;
    }
#line default
        break;
      case 54: // declarator_list -> declarator_list, COMMA, init_bitfield_declarator
#line 268 "MainParser.gppg"
                                                   {
      ValueStack[ValueStack.Depth-3].middle_code_list.AddRange(ValueStack[ValueStack.Depth-1].middle_code_list);
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-3].middle_code_list;
    }
#line default
        break;
      case 55: // init_bitfield_declarator -> declarator
#line 274 "MainParser.gppg"
               {
      GenerateDeclaration.GenerateDeclarator(Start.SpecifierStack.Peek(), ValueStack[ValueStack.Depth-1].declarator);
      CurrentSemanticValue.middle_code_list = new MyList<MiddleCode>();
    }
#line default
        break;
      case 56: // init_bitfield_declarator -> declarator, ASSIGN, initializer
#line 278 "MainParser.gppg"
                                  {
      CurrentSemanticValue.middle_code_list = GenerateDeclaration.GenerateAssignmentDeclarator(Start.SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 57: // init_bitfield_declarator -> declarator, COLON, constant_integral_expression
#line 281 "MainParser.gppg"
                                                  {
      GenerateDeclaration.GenerateBitfieldDeclarator(Start.SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].expression.Symbol());
      CurrentSemanticValue.middle_code_list = new MyList<MiddleCode>();
    }
#line default
        break;
      case 58: // init_bitfield_declarator -> COLON, constant_integral_expression
#line 285 "MainParser.gppg"
                                       {
      GenerateDeclaration.GenerateBitfieldDeclarator(Start.SpecifierStack.Peek(), null, ValueStack[ValueStack.Depth-1].expression.Symbol());
      CurrentSemanticValue.middle_code_list = new MyList<MiddleCode>();
    }
#line default
        break;
      case 59: // declarator -> optional_pointer_list, direct_declarator
#line 291 "MainParser.gppg"
                                            {
      CurrentSemanticValue.declarator = GenerateDeclaration.GeneratePointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 60: // direct_declarator -> NAME
#line 296 "MainParser.gppg"
         {
      CurrentSemanticValue.declarator = new Declarator(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 61: // direct_declarator -> LEFT_PAREN, declarator, RIGHT_PAREN
#line 299 "MainParser.gppg"
                                      {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator; 
    }
#line default
        break;
      case 62: // direct_declarator -> direct_declarator, LEFT_SQUARE, 
               //                      optional_constant_integral_expression, RIGHT_SQUARE
#line 302 "MainParser.gppg"
                                                                                     {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 63: // direct_declarator -> direct_declarator, LEFT_PAREN, parameter_ellipse_list, 
               //                      RIGHT_PAREN
#line 305 "MainParser.gppg"
                                                                    {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateNewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].pair);
    }
#line default
        break;
      case 64: // direct_declarator -> direct_declarator, LEFT_PAREN, optional_identifier_list, 
               //                      RIGHT_PAREN
#line 308 "MainParser.gppg"
                                                                      {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateOldFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].string_list);
    }
#line default
        break;
      case 65: // optional_pointer_list -> /* empty */
#line 313 "MainParser.gppg"
                 { CurrentSemanticValue.type_list = new MyList<CCompiler.Type>(); }
#line default
        break;
      case 66: // optional_pointer_list -> pointer_list
#line 314 "MainParser.gppg"
                 { CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-1].type_list; }
#line default
        break;
      case 67: // pointer_list -> pointer
#line 317 "MainParser.gppg"
            {
      CurrentSemanticValue.type_list = new MyList<CCompiler.Type>();
      ((List<CCompiler.Type>) CurrentSemanticValue.type_list).Add(ValueStack[ValueStack.Depth-1].type);
    }
#line default
        break;
      case 68: // pointer_list -> pointer_list, pointer
#line 321 "MainParser.gppg"
                         {
      ValueStack[ValueStack.Depth-2].type_list.Add(ValueStack[ValueStack.Depth-1].type);
      CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-2].type_list;
    }
#line default
        break;
      case 69: // pointer -> ASTERRISK
#line 327 "MainParser.gppg"
              {
      CurrentSemanticValue.type = new CCompiler.Type((CCompiler.Type) null);
    }
#line default
        break;
      case 70: // pointer -> ASTERRISK, declaration_specifier_list
#line 330 "MainParser.gppg"
                                         {
      CurrentSemanticValue.type = Start.SpecifierStack.Pop().GenerateQualifiers();
    }
#line default
        break;
      case 71: // optional_parameter_ellipse_list -> /* empty */
#line 337 "MainParser.gppg"
                           { CurrentSemanticValue.pair = null; }
#line default
        break;
      case 72: // optional_parameter_ellipse_list -> parameter_ellipse_list
#line 338 "MainParser.gppg"
                           { CurrentSemanticValue.pair = ValueStack[ValueStack.Depth-1].pair;   }
#line default
        break;
      case 73: // parameter_ellipse_list -> parameter_list
#line 341 "MainParser.gppg"
                   {
      CurrentSemanticValue.pair = new Pair<List<Symbol>,Boolean>(ValueStack[ValueStack.Depth-1].symbol_list, false);
    }
#line default
        break;
      case 74: // parameter_ellipse_list -> parameter_list, COMMA, ELLIPSE
#line 344 "MainParser.gppg"
                                 {
      CurrentSemanticValue.pair = new Pair<List<Symbol>,Boolean>(ValueStack[ValueStack.Depth-3].symbol_list, true);
    }
#line default
        break;
      case 75: // Anon@7 -> /* empty */
#line 349 "MainParser.gppg"
    {
      ++Start.ParameterCount;
    }
#line default
        break;
      case 76: // parameter_list -> Anon@7, parameter_declaration
#line 352 "MainParser.gppg"
                          {
      --Start.ParameterCount;
      List<Symbol> symbolList = new MyList<Symbol>();
      symbolList.Add(ValueStack[ValueStack.Depth-1].symbol);
      CurrentSemanticValue.symbol_list = symbolList;
    }
#line default
        break;
      case 77: // Anon@8 -> /* empty */
#line 358 "MainParser.gppg"
                         {
      ++Start.ParameterCount;
    }
#line default
        break;
      case 78: // parameter_list -> parameter_list, COMMA, Anon@8, parameter_declaration
#line 361 "MainParser.gppg"
                          {
      --Start.ParameterCount;
      ValueStack[ValueStack.Depth-4].symbol_list.Add(ValueStack[ValueStack.Depth-1].symbol);
      CurrentSemanticValue.symbol_list = ValueStack[ValueStack.Depth-4].symbol_list;
    }
#line default
        break;
      case 79: // parameter_declaration -> declaration_specifier_list
#line 368 "MainParser.gppg"
                               {
      CurrentSemanticValue.symbol = GenerateDeclaration.GenerateParameter(Start.SpecifierStack.Pop(), null);
    }
#line default
        break;
      case 80: // parameter_declaration -> declaration_specifier_list, declarator
#line 371 "MainParser.gppg"
                                          {
      CurrentSemanticValue.symbol = GenerateDeclaration.GenerateParameter(Start.SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 81: // parameter_declaration -> declaration_specifier_list, abstract_declarator
#line 374 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.symbol = GenerateDeclaration.GenerateParameter(Start.SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 82: // optional_identifier_list -> /* empty */
#line 379 "MainParser.gppg"
                    { CurrentSemanticValue.string_list = new MyList<string>(); }
#line default
        break;
      case 83: // optional_identifier_list -> identifier_list
#line 380 "MainParser.gppg"
                    { CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-1].string_list;                 }
#line default
        break;
      case 84: // identifier_list -> NAME
#line 383 "MainParser.gppg"
         {
      List<string> nameList = new MyList<string>();
      nameList.Add(ValueStack[ValueStack.Depth-1].name);
      CurrentSemanticValue.string_list = nameList;
    }
#line default
        break;
      case 85: // identifier_list -> identifier_list, COMMA, NAME
#line 388 "MainParser.gppg"
                               {
      ValueStack[ValueStack.Depth-3].string_list.Add(ValueStack[ValueStack.Depth-1].name); 
      CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-3].string_list;
    }
#line default
        break;
      case 86: // initializer -> assignment_expression
#line 396 "MainParser.gppg"
                          {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 87: // initializer -> LEFT_BLOCK, initializer_list, optional_comma, RIGHT_BLOCK
#line 399 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 90: // initializer_list -> initializer
#line 408 "MainParser.gppg"
                {
      List<object> initializerList = new MyList<object>();
      initializerList.Add(ValueStack[ValueStack.Depth-1].obj);
      CurrentSemanticValue.object_list = initializerList;
    }
#line default
        break;
      case 91: // initializer_list -> initializer_list, COMMA, initializer
#line 413 "MainParser.gppg"
                                       {
      ValueStack[ValueStack.Depth-3].object_list.Add(ValueStack[ValueStack.Depth-1].obj);
      CurrentSemanticValue.object_list = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 92: // type_name -> declaration_specifier_list
#line 421 "MainParser.gppg"
                                {
      CurrentSemanticValue.type = GenerateDeclaration.GenerateTypeName(Start.SpecifierStack.Pop(), null);
    }
#line default
        break;
      case 93: // type_name -> declaration_specifier_list, abstract_declarator
#line 424 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.type = GenerateDeclaration.GenerateTypeName(Start.SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 94: // abstract_declarator -> pointer_list
#line 431 "MainParser.gppg"
                 {
      CurrentSemanticValue.declarator = GenerateDeclaration.GeneratePointerDeclarator(ValueStack[ValueStack.Depth-1].type_list, null);
    }
#line default
        break;
      case 95: // abstract_declarator -> optional_pointer_list, direct_abstract_declarator
#line 434 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.declarator = GenerateDeclaration.GeneratePointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 96: // direct_abstract_declarator -> LEFT_PAREN, abstract_declarator, RIGHT_PAREN
#line 439 "MainParser.gppg"
                                               {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator;
    }
#line default
        break;
      case 97: // direct_abstract_declarator -> LEFT_SQUARE, 
               //                               optional_constant_integral_expression, 
               //                               RIGHT_SQUARE
#line 442 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateArrayType(null, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 98: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_SQUARE, 
               //                               optional_constant_integral_expression, 
               //                               RIGHT_SQUARE
#line 446 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 99: // direct_abstract_declarator -> LEFT_PAREN, optional_parameter_ellipse_list, 
               //                               RIGHT_PAREN
#line 449 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateNewFunctionDeclaration(null, ValueStack[ValueStack.Depth-2].pair);
    }
#line default
        break;
      case 100: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_PAREN, 
                //                               optional_parameter_ellipse_list, RIGHT_PAREN
#line 453 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.declarator = GenerateDeclaration.GenerateNewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].pair);
    }
#line default
        break;
      case 101: // optional_statement_list -> /* empty */
#line 460 "MainParser.gppg"
                {
      CurrentSemanticValue.statement = new Statement(new MyList<MiddleCode>(), new HashSet<MiddleCode>());
    }
#line default
        break;
      case 102: // optional_statement_list -> optional_statement_list, statement
#line 463 "MainParser.gppg"
                                      {
      Start.Backpatch(ValueStack[ValueStack.Depth-2].statement.NextSet(), ValueStack[ValueStack.Depth-1].statement.List());
      List<MiddleCode> codeList = new MyList<MiddleCode>();
      codeList.AddRange(ValueStack[ValueStack.Depth-2].statement.List());
      codeList.AddRange(ValueStack[ValueStack.Depth-1].statement.List());
      CurrentSemanticValue.statement = new Statement(codeList, ValueStack[ValueStack.Depth-1].statement.NextSet());
    }
#line default
        break;
      case 103: // statement -> opened_statement
#line 472 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 104: // statement -> closed_statement
#line 473 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 105: // switch_header -> /* empty */
#line 476 "MainParser.gppg"
                 { MiddleCodeGenerator.GenerateSwitchHeader(); }
#line default
        break;
      case 106: // loop_header -> /* empty */
#line 479 "MainParser.gppg"
                 { MiddleCodeGenerator.GenerateLoopHeader(); }
#line default
        break;
      case 107: // opened_statement -> IF, LEFT_PAREN, expression, RIGHT_PAREN, statement
#line 482 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateIfStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 108: // opened_statement -> IF, LEFT_PAREN, expression, RIGHT_PAREN, closed_statement, 
                //                     ELSE, opened_statement
#line 485 "MainParser.gppg"
                                                                                {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateIfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 109: // opened_statement -> SWITCH, switch_header, LEFT_PAREN, expression, RIGHT_PAREN, 
                //                     opened_statement
#line 488 "MainParser.gppg"
                                                                            {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateSwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 110: // opened_statement -> CASE, constant_integral_expression, COLON, opened_statement
#line 491 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateCaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 111: // opened_statement -> WHILE, loop_header, LEFT_PAREN, expression, RIGHT_PAREN, 
                //                     opened_statement
#line 494 "MainParser.gppg"
                                                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateWhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 112: // opened_statement -> FOR, loop_header, LEFT_PAREN, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PAREN, opened_statement
#line 499 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 113: // opened_statement -> NAME, COLON, opened_statement
#line 502 "MainParser.gppg"
                                {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateLabelStatement(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 114: // closed_statement -> IF, LEFT_PAREN, expression, RIGHT_PAREN, closed_statement, 
                //                     ELSE, closed_statement
#line 507 "MainParser.gppg"
                                                                               {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateIfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 115: // closed_statement -> SWITCH, switch_header, LEFT_PAREN, expression, RIGHT_PAREN, 
                //                     closed_statement
#line 510 "MainParser.gppg"
                                                                            {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateSwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 116: // closed_statement -> WHILE, loop_header, LEFT_PAREN, expression, RIGHT_PAREN, 
                //                     closed_statement
#line 513 "MainParser.gppg"
                                                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateWhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 117: // closed_statement -> FOR, loop_header, LEFT_PAREN, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PAREN, closed_statement
#line 518 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 118: // closed_statement -> DO, loop_header, statement, WHILE, LEFT_PAREN, expression, 
                //                     RIGHT_PAREN, SEMICOLON
#line 521 "MainParser.gppg"
                                                                               {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateDoStatement(ValueStack[ValueStack.Depth-6].statement, ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 119: // closed_statement -> CASE, constant_integral_expression, COLON, closed_statement
#line 524 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateCaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 120: // closed_statement -> DEFAULT, COLON, closed_statement
#line 527 "MainParser.gppg"
                                   {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateDefaultStatement(ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 121: // closed_statement -> CONTINUE, SEMICOLON
#line 530 "MainParser.gppg"
                       {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateContinueStatement();
    }
#line default
        break;
      case 122: // closed_statement -> BREAK, SEMICOLON
#line 533 "MainParser.gppg"
                    {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateBreakStatement();
    }
#line default
        break;
      case 123: // Anon@9 -> /* empty */
#line 536 "MainParser.gppg"
               {
      Start.CurrentTable = new SymbolTable(Start.CurrentTable, Scope.Block);
    }
#line default
        break;
      case 124: // closed_statement -> LEFT_BLOCK, Anon@9, optional_statement_list, RIGHT_BLOCK
#line 539 "MainParser.gppg"
                                        {
      Start.CurrentTable = Start.CurrentTable.ParentTable;
      CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-2].statement;
    }
#line default
        break;
      case 125: // closed_statement -> GOTO, NAME, SEMICOLON
#line 543 "MainParser.gppg"
                        {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateGotoStatement(ValueStack[ValueStack.Depth-2].name);
    }
#line default
        break;
      case 126: // closed_statement -> RETURN, optional_expression, SEMICOLON
#line 546 "MainParser.gppg"
                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateReturnStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 127: // closed_statement -> optional_expression, SEMICOLON
#line 549 "MainParser.gppg"
                                  {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateExpressionStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 128: // closed_statement -> declaration
#line 552 "MainParser.gppg"
                {
      CurrentSemanticValue.statement = new Statement(ValueStack[ValueStack.Depth-1].middle_code_list, new HashSet<MiddleCode>());
    }
#line default
        break;
      case 129: // closed_statement -> JUMP_REGISTER, LEFT_PAREN, REGISTER_NAME, RIGHT_PAREN, 
                //                     SEMICOLON
#line 567 "MainParser.gppg"
                                                                 {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateJumpRegisterStatement(ValueStack[ValueStack.Depth-3].register);
    }
#line default
        break;
      case 130: // closed_statement -> INTERRUPT, LEFT_PAREN, constant_integral_expression, 
                //                     RIGHT_PAREN, SEMICOLON
#line 570 "MainParser.gppg"
                                                                            {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GenerateInterruptStatement(ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 131: // optional_constant_integral_expression -> /* empty */
#line 577 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 132: // optional_constant_integral_expression -> constant_integral_expression
#line 578 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 133: // constant_integral_expression -> condition_expression
#line 581 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateConstantIntegralExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 134: // optional_expression -> /* empty */
#line 588 "MainParser.gppg"
                { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 135: // optional_expression -> expression
#line 589 "MainParser.gppg"
                { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 136: // expression -> assignment_expression
#line 592 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 137: // expression -> expression, COMMA, assignment_expression
#line 595 "MainParser.gppg"
                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateCommaExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 138: // assignment_expression -> condition_expression
#line 602 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 139: // assignment_expression -> prefix_expression, ASSIGN, assignment_expression
#line 605 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateSimpleAssignmentExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 140: // assignment_expression -> prefix_expression, assignment_operator, 
                //                          assignment_expression
#line 608 "MainParser.gppg"
                                                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateCompoundAssignmentExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 141: // assignment_operator -> ADD_ASSIGN
#line 613 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BinaryAdd;      }
#line default
        break;
      case 142: // assignment_operator -> SUBTRACT_ASSIGN
#line 614 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BinarySubtract; }
#line default
        break;
      case 143: // assignment_operator -> MULTIPLY_ASSIGN
#line 615 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedMultiply; }
#line default
        break;
      case 144: // assignment_operator -> DIVIDE_ASSIGN
#line 616 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedDivide;   }
#line default
        break;
      case 145: // assignment_operator -> MODULO_ASSIGN
#line 617 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedModulo;   }
#line default
        break;
      case 146: // assignment_operator -> AND_ASSIGN
#line 618 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseAnd;     }
#line default
        break;
      case 147: // assignment_operator -> IOR_ASSIGN
#line 619 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseIOr;     }
#line default
        break;
      case 148: // assignment_operator -> XOR_ASSIGN
#line 620 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseXOr;     }
#line default
        break;
      case 149: // assignment_operator -> LEFT_SHIFT_ASSIGN
#line 621 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;      }
#line default
        break;
      case 150: // assignment_operator -> RIGHT_SHIFT_ASSIGN
#line 622 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight;     }
#line default
        break;
      case 151: // condition_expression -> logical_or_expression
#line 627 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 152: // condition_expression -> logical_or_expression, QUESTION_MARK, expression, COLON, 
                //                         condition_expression
#line 630 "MainParser.gppg"
                                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateConditionalExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 153: // logical_or_expression -> logical_and_expression
#line 637 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 154: // logical_or_expression -> logical_or_expression, LOGICAL_OR, 
                //                          logical_and_expression
#line 640 "MainParser.gppg"
                                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateLogicalOrExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 155: // logical_and_expression -> bitwise_ior_expression
#line 647 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 156: // logical_and_expression -> logical_and_expression, LOGICAL_AND, 
                //                           bitwise_ior_expression
#line 650 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateLogicalAndExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 157: // bitwise_ior_expression -> bitwise_xor_expression
#line 657 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 158: // bitwise_ior_expression -> bitwise_ior_expression, BITWISE_IOR, 
                //                           bitwise_xor_expression
#line 660 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateBitwiseExpression(ValueStack[ValueStack.Depth-3].expression, MiddleOperator.BitwiseIOr, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 159: // bitwise_xor_expression -> bitwise_and_expression
#line 667 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 160: // bitwise_xor_expression -> bitwise_xor_expression, BITWISE_XOR, 
                //                           bitwise_and_expression
#line 670 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateBitwiseExpression(ValueStack[ValueStack.Depth-3].expression, MiddleOperator.BitwiseXOr, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 161: // bitwise_and_expression -> equality_expression
#line 677 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 162: // bitwise_and_expression -> bitwise_and_expression, AMPERSAND, 
                //                           equality_expression
#line 680 "MainParser.gppg"
                                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateBitwiseExpression(ValueStack[ValueStack.Depth-3].expression, MiddleOperator.BitwiseAnd, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 163: // equality_expression -> relation_expression
#line 687 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 164: // equality_expression -> equality_expression, equality_operator, 
                //                        relation_expression
#line 690 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateRelationalExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 165: // equality_operator -> EQUAL
#line 695 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Equal;    }
#line default
        break;
      case 166: // equality_operator -> NOT_EQUAL
#line 696 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.NotEqual; }
#line default
        break;
      case 167: // relation_expression -> shift_expression
#line 701 "MainParser.gppg"
                     {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 168: // relation_expression -> relation_expression, relation_operator, shift_expression
#line 704 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateRelationalExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 169: // relation_operator -> LESS_THAN
#line 709 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedLessThan;         }
#line default
        break;
      case 170: // relation_operator -> LESS_THAN_EQUAL
#line 710 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedLessThanEqual;    }
#line default
        break;
      case 171: // relation_operator -> GREATER_THAN
#line 711 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedGreaterThan;      }
#line default
        break;
      case 172: // relation_operator -> GREATER_THAN_EQUAL
#line 712 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedGreaterThanEqual; }
#line default
        break;
      case 173: // shift_expression -> add_expression
#line 717 "MainParser.gppg"
                   {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 174: // shift_expression -> shift_expression, shift_operator, add_expression
#line 720 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateShiftExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 175: // shift_operator -> LEFT_SHIFT
#line 725 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;  }
#line default
        break;
      case 176: // shift_operator -> RIGHT_SHIFT
#line 726 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight; }
#line default
        break;
      case 177: // add_expression -> multiply_expression
#line 731 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 178: // add_expression -> add_expression, binary_Add_operator, multiply_expression
#line 734 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateAdditionExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 179: // binary_Add_operator -> PLUS
#line 739 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.BinaryAdd;      }
#line default
        break;
      case 180: // binary_Add_operator -> MINUS
#line 740 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.BinarySubtract; }
#line default
        break;
      case 181: // multiply_expression -> cast_expression
#line 745 "MainParser.gppg"
                    {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 182: // multiply_expression -> multiply_expression, multiply_operator, cast_expression
#line 748 "MainParser.gppg"
                                                          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateMultiplyExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 183: // multiply_operator -> ASTERRISK
#line 753 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedMultiply; }
#line default
        break;
      case 184: // multiply_operator -> DIVIDE
#line 754 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedDivide;   }
#line default
        break;
      case 185: // multiply_operator -> MODULO
#line 755 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedModulo;   }
#line default
        break;
      case 186: // cast_expression -> prefix_expression
#line 760 "MainParser.gppg"
                      {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 187: // cast_expression -> LEFT_PAREN, type_name, RIGHT_PAREN, cast_expression
#line 763 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateCastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 188: // prefix_Add_operator -> PLUS
#line 770 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.UnaryAdd;      }
#line default
        break;
      case 189: // prefix_Add_operator -> MINUS
#line 771 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.UnarySubtract; }
#line default
        break;
      case 190: // increment_operator -> INCREMENT
#line 774 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Increment; }
#line default
        break;
      case 191: // increment_operator -> DECREMENT
#line 775 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Decrement; }
#line default
        break;
      case 192: // prefix_expression -> postfix_expression
#line 780 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 193: // prefix_expression -> prefix_Add_operator, cast_expression
#line 783 "MainParser.gppg"
                                        {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateUnaryExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 194: // prefix_expression -> increment_operator, prefix_expression
#line 786 "MainParser.gppg"
                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GeneratePrefixIncrementExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 195: // prefix_expression -> LOGICAL_NOT, cast_expression
#line 789 "MainParser.gppg"
                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateLogicalNotExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 196: // prefix_expression -> BITWISE_NOT, cast_expression
#line 792 "MainParser.gppg"
                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateBitwiseNotExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 197: // prefix_expression -> SIZEOF, prefix_expression
#line 795 "MainParser.gppg"
                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateSizeOfExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 198: // prefix_expression -> SIZEOF, LEFT_PAREN, type_name, RIGHT_PAREN
#line 798 "MainParser.gppg"
                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateSizeOfType(ValueStack[ValueStack.Depth-2].type);
    }
#line default
        break;
      case 199: // prefix_expression -> AMPERSAND, cast_expression
#line 801 "MainParser.gppg"
                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateAddressExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 200: // prefix_expression -> ASTERRISK, cast_expression
#line 804 "MainParser.gppg"
                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateDerefExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 201: // postfix_expression -> primary_expression
#line 811 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 202: // postfix_expression -> postfix_expression, increment_operator
#line 814 "MainParser.gppg"
                                          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GeneratePostfixIncrementExpression(ValueStack[ValueStack.Depth-2].expression, ValueStack[ValueStack.Depth-1].middleOperator);
    }
#line default
        break;
      case 203: // postfix_expression -> postfix_expression, DOT, NAME
#line 817 "MainParser.gppg"
                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateDotExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 204: // postfix_expression -> postfix_expression, ARROW, NAME
#line 820 "MainParser.gppg"
                                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateArrowExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 205: // postfix_expression -> postfix_expression, LEFT_SQUARE, expression, RIGHT_SQUARE
#line 823 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateIndexExpression(ValueStack[ValueStack.Depth-4].expression, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 206: // Anon@10 -> /* empty */
#line 826 "MainParser.gppg"
                       {
      MiddleCodeGenerator.GenerateCallHeader(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 207: // postfix_expression -> postfix_expression, Anon@10, LEFT_PAREN, 
                //                       optional_argument_expression_list, RIGHT_PAREN
#line 829 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateCallExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-2].expression_list);
    }
#line default
        break;
      case 208: // primary_expression -> NAME
#line 836 "MainParser.gppg"
         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateSymbolExpression(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 209: // primary_expression -> VALUE
#line 839 "MainParser.gppg"
          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateValueExpression(ValueStack[ValueStack.Depth-1].symbol);
    }
#line default
        break;
      case 210: // primary_expression -> SYSTEM_CALL, COLON, NAME, LEFT_PAREN, 
                //                       optional_system_argument_expression_list, RIGHT_PAREN
#line 842 "MainParser.gppg"
                                                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateSystemCall(ValueStack[ValueStack.Depth-4].name, ValueStack[ValueStack.Depth-2].expression_list);
    }
#line default
        break;
      case 211: // primary_expression -> REGISTER_NAME
#line 845 "MainParser.gppg"
                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateInspectRegisterExpression(ValueStack[ValueStack.Depth-1].register);
    }
#line default
        break;
      case 212: // primary_expression -> CARRY_FLAG
#line 848 "MainParser.gppg"
               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateCarryFlagExpression();
    }
#line default
        break;
      case 213: // primary_expression -> FLAGBYTE, LEFT_PAREN, RIGHT_PAREN
#line 851 "MainParser.gppg"
                                    {
      CurrentSemanticValue.expression = MiddleCodeGenerator.GenerateFlagbyteExpression();
    }
#line default
        break;
      case 214: // primary_expression -> LEFT_PAREN, expression, RIGHT_PAREN
#line 854 "MainParser.gppg"
                                      {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-2].expression; 
    }
#line default
        break;
      case 215: // optional_system_argument_expression_list -> /* empty */
#line 861 "MainParser.gppg"
                                    { CurrentSemanticValue.expression_list = new List<Expression>(); }
#line default
        break;
      case 216: // optional_system_argument_expression_list -> system_argument_expression_list
#line 862 "MainParser.gppg"
                                    { CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-1].expression_list;                     }
#line default
        break;
      case 217: // system_argument_expression_list -> assignment_expression
#line 865 "MainParser.gppg"
                          {
      List<Expression> argList = new List<Expression>();
      argList.Add(ValueStack[ValueStack.Depth-1].expression);
      CurrentSemanticValue.expression_list = argList;
    }
#line default
        break;
      case 218: // system_argument_expression_list -> system_argument_expression_list, COMMA, 
                //                                    assignment_expression
#line 870 "MainParser.gppg"
                                                                {
      List<Expression> argList = ValueStack[ValueStack.Depth-3].expression_list;
      argList.Add(ValueStack[ValueStack.Depth-1].expression);
      CurrentSemanticValue.expression_list = argList;
    }
#line default
        break;
      case 219: // optional_argument_expression_list -> /* empty */
#line 877 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = new MyList<Expression>(); }
#line default
        break;
      case 220: // optional_argument_expression_list -> argument_expression_list
#line 878 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-1].expression_list;                           }
#line default
        break;
      case 221: // argument_expression_list -> assignment_expression
#line 881 "MainParser.gppg"
                          {
      List<Expression> argList = new MyList<Expression>();
      argList.Add(MiddleCodeGenerator.GenerateParameterExpression(ValueStack[ValueStack.Depth-1].expression));
      CurrentSemanticValue.expression_list = argList;
    }
#line default
        break;
      case 222: // argument_expression_list -> argument_expression_list, COMMA, 
                //                             assignment_expression
#line 886 "MainParser.gppg"
                                                         {
      List<Expression> argList = ValueStack[ValueStack.Depth-3].expression_list;
      argList.Add(MiddleCodeGenerator.GenerateParameterExpression(ValueStack[ValueStack.Depth-1].expression));
      CurrentSemanticValue.expression_list = argList;
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 894 "MainParser.gppg"
 #line default
}
}
